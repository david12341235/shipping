Construct a shipping network with at least four locations, and confirm that shipments move between them as expected. Run tests with different segment capacity values to compare your network under light and heavy congestion. Add a diagram of this network to your README file, and discuss the tests performed. The code for this client should be named verification.cpp.

In addition, set up a shipping network with 100 sources and 1 destination. The destination should be connected to a terminal, which is in turn connected to 10 terminals, each of which is connected to 10 sources. All connections are via truck segments. Have each source send shipments holding 100 packages to the destination at the normal truck speed. Run the simulation for a while.

Now, reset the simulation and do the same thing, but vary the shipment sizes (use a randomly chosen shipment size for each source) from 1 package to 1,000 packages. Record the results for each case.

Discuss in your README file the level of shipment delivery refusal observed in each case. The client implementing this test should be submitted as experiment.cpp. We would like you to include whatever statistics you think are relevant to your specific implementation, but at a bare minimum please provide us with the destination's shipments received and average latency, as well as some sort of measure of segment performance (an average for each of shipments received and refused, for example).




The network with 100 sources and 1 destination is named "funnel" in our experiment.cpp. If we set the attributes so that truck capacity or segment capacity do not limit the simulation, we get the expected results of having no shipments refused/fragmented and the latency being the amount of time to get from source to destination without delay. This is what was done in the following simulation: time was set to 3 hours, the truck speeds 100 mph, the segment lengths 100 miles, the segment capacity 10 trucks and truck capacity 10,000 packages. Each customer shipped at a rate of once per day (starting from time 0) and cost per package per mile was 1.0. 

forwarded tsA1: 1
refused tsA1: 0
fragmented tsA1: 0

forwarded tsK1: 10
refused tsK1: 0
fragmented tsK1: 0

cost CustomerL1: 3000000.00
received CustomerL1: 100
latency CustomerL1: 3.00

forwarded tsL1: 100
refused tsL1: 0
fragmented tsL1: 0
